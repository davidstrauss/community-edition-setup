<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 * Asimba Server
 * 
 * Copyright (C) 2012 Asimba
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see www.gnu.org/licenses
 * 
 * Asimba - Serious Open Source SSO - More information on www.asimba.org
 * 
 -->
<!--
 
  asimba-baseline.xml
  
  The baseline configuration configures a fully functional Asimba server instance that
  works out of the box. 
  
  Purpose of the baseline configuration, is to provide a simple and working version
  that can be used to play around your own working Asimba deployment.
  
  The following basic features are supported:
  - SAML2 IDP, presenting as EntityID "entity:asimba1"
  - Username/password authentication for some testusers
  
  The only required configuration is to add your own application to the known requestors.
  
  Please see the instructions on asimba.org how to do this, as well as a number
  of tasks that can be performed with the baseline configuration as starting point.

 -->
<asimba-server>
	<!--  Server configuration -->
	<server id="asimba1" friendlyname="Asimba Baseline Server">
		<organization id="asimba.org" friendlyname="Asimba SSO"/>
	</server>

	<!-- 
		Crypto configuration describes the behavior of the central cryptographic services
		and keystores that are used for protocol operations. There is a keystore that holds
		the cryptographic credentials (private- and public key and certificate) of the server itself
		as well as a truststore, that works as a placeholder for certificates of trusted entities 
	 -->
	<crypto>
		<message_digest algorithm="SHA1"/>		
		<random_generator algorithm="SHA1PRNG" />
		
		<signing algorithm="SHA1withRSA">
			<signingfactory class="com.alfaariss.oa.engine.crypto.keystore.KeystoreSigningFactory">
				<keystore>
					<file>${webapp.root}/WEB-INF/sample-data/asimba-demo-keystore.jks</file>
					<type>JKS</type>
					<keystore_password>changeit</keystore_password>		
					<alias>asimba-demo</alias>	
					<password>changeit</password>
				</keystore>
	
				<!-- No truststore in baseline config yet; to enable the truststore, rename 
				     the 'no_truststore' element to 'truststore' 
				-->
				<no_truststore>
					<file>${webapp.root}/WEB-INF/sample-data/asimba-demo-truststore.jks</file>
					<type>JKS</type>
					<keystore_password>changeit</keystore_password>
				</no_truststore>
			</signingfactory>
		</signing>
	</crypto>  
		
	<!-- Configure sessionfactory implementation and behavior. The baseline server configures
	     an in-memory session store.
	 -->
	<sessionfactory class="com.alfaariss.oa.engine.session.memory.MemorySessionFactory">
		<expire>900</expire>
	    <interval>60</interval>
	    <max>100</max>
	</sessionfactory>

	<!-- Configure the TicketGrantingTicket-factory implemententation and behavior. The baseline
	     server configures an in-memory TGT store  -->
	<tgtfactory class="com.alfaariss.oa.engine.tgt.memory.MemoryTGTFactory">
		<expire>3600</expire>
	    <interval>60</interval>
	    <max>100</max>
	</tgtfactory>  
	
	<!-- Configure User Provisioning
	     The main section defines which translator (from username to resolved user instance) is
	     used.
	 -->
	<userfactory class="com.alfaariss.oa.engine.user.provisioning.ProvisioningFactory">
		<main>
			<translator>standard</translator>
		</main>
		
		<!-- Translator links a user provisioning profile and a back-end store that the profile 
		     works on
		-->
		<translator id="standard" class="com.alfaariss.oa.engine.user.provisioning.translator.standard.StandardTranslator">
			<!--
				'main' configures which external storage and which translator-profile are used
				as userfactory
			 -->
			<main>
				<externalstorage>asimba_users</externalstorage>
				<profile>file</profile>
			</main>
			
			<!--
				'profile' configures a translator-profile
				the fields that can be defined as attribute of 'account/enabled@' and 'account/method/registered'
				can be cached in the user's attributes
			 -->
			<profile id="file" class="com.alfaariss.oa.engine.user.provisioning.translator.standard.StandardProfile">
				<account>
					<!-- enabled: configure whether the account is enabled; the baseline configuration
					     makes this dependent on whether the useraccount includes an attribute with
					     the name 'phonenr'  -->
					<enabled default="false" field="phonenr" converter="converter.exists" />
					
					<!-- authentication: define the authentication methods that a user from this factory
					     is allowed to use; this can be fine-tuned even further with the 'registered'-element
					 -->
					<authentication>
						<method id="GuestMethod">
							<registered default="true" />
						</method>
						<method id="IdentifyingMethod">
							<registered default="true" />
						</method>
						<method id="AsimbaUsersXmlPassword">
							<registered default="true" />
						</method>
						<method id="SMSCMAuthMethod">
							<registered default="false" field="phonenr" converter="converter.exists" />
						</method>
					</authentication>
				</account>
				<!-- convertermanager: configure rules that can be applied on the enabled-property of the account
				     or on registered-properties of authenticationmethods, to be able to control the behavior
				-->
				<convertermanager> 
					<converter id="converter.exists"
						class="com.alfaariss.oa.engine.user.provisioning.translator.standard.converter.exist.ExistConverter"/>
				</convertermanager>
			</profile>
		</translator>
		<!-- storagemanager: configure a backend data stores for user provisioning, that can be linked with
		     translator-profiles to provide user instances in the appropriate context  
		-->
		<storagemanager>			
			<storage id="asimba_users" class="org.asimba.engine.user.provisioning.external.storage.file.AsimbaUsersXml">
				<file>${webapp.root}/WEB-INF/sample-data/asimba-users.xml</file>
			</storage>
		</storagemanager>
	</userfactory>
	
	<!-- 
		RequestorPoolFactory defines how requestors (sp's) are defined; they can be defined in this configuration file,
		but they can also be sourced from a table, available through a JDBC-connection (not in baseline config)
		A ResourcePool groups together the following attributes and behavior for a SP making a request:
		  * the actual Requestor definitions
		  * which authentication-profiles are available for a user
		  * the attributerelease policy to apply
		  * the pre- and post-authorization policy to apply
		  * a property-list for each requestor 
	-->
	<requestorpoolfactory class="com.alfaariss.oa.engine.requestor.configuration.ConfigurationFactory">
		<pool id="requestorpool.1" friendlyname="Requestor Pool 1" enabled="true">
			<authentication forced="false">
				<profile id="local.guest" />
				<profile id="local.identifying" />
				<profile id="local.asimba.passwd" />
				<profile id="local.sms.cm" />
				<profile id="local.pwdplussms" />
			</authentication>
			<requestors>
				 <requestor id="demo-aselect-sp" friendlyname="Test Request A-Select SP" enabled="true">
				 	<properties>
						<property name="aselect.app_level" value="9" />
					</properties>                    
				 </requestor>
				<requestor id="localhost/AsimbaSimpleSP" 
					friendlyname="Asimba Simple SP" 
					enabled="true" />
			</requestors>
			
			<attributerelease policy="asimba.releasepolicy.1" />
		</pool>
	</requestorpoolfactory>

	<!-- authentication: define Authentication Profiles; an AuthenticationProfile is made up of one or 
	     more authentication methods, which are executed sequentially. The behaviour of the actual authentication
	     methods is defined in the websso section of the configuration  -->
	<authentication class="com.alfaariss.oa.engine.authentication.configuration.ConfigurationFactory">
		<profile id="local.guest" friendlyname="Login as guest" enabled="true">
			<method id="GuestAuthenticationMethod" /> 
		</profile>
		<profile id="local.identifying" friendlyname="Login with provided username without authentication" enabled="true">
			<method id="IdentifyingMethod" />
		</profile>
		<profile id="local.asimba.passwd" friendlyname="Login from Asimba userstore (password)" enabled="true">
			<method id="AsimbaUsersXmlPassword" />
		</profile>
		<profile id="local.sms.cm" friendlyname="Login with SMS Authentication (CM gateway)" enabled="true">
			<method id="SMSCMAuthMethod" />
		</profile>
		<profile id="local.pwdplussms" friendlyname="Login with Username/Password and SMS authentication (CM gateway)" enabled="true">
			<method id="AsimbaUsersXmlPassword" />
			<method id="SMSCMAuthMethod" />
		</profile>
	</authentication>	

	<!-- websso: configure the behaviour of the server frontend. This is made up of
	       * authentication: the authentication methods
	       * profiles: the IDP profiles (SAML, A-Select, etc.)
	       * postauthorization: the web postauthorization phase
	-->
	<websso>
		<authentication always_show_select_form="false">
			<methods>
				<!--
					The Guest Authentication Method immediately returns the identity of a configured user
					The guest user is identified by the user@id attribute, and must exist in the
					UserFactory
				 -->
				<method id="GuestAuthenticationMethod" friendlyname="Guest authentication" enabled="true" 
					class="com.alfaariss.oa.authentication.guest.GuestAuthenticationMethod">
					<user id="guest"/>
				</method>
				
				<!-- 
					The Identifying Authentication Method requests a userid. When this userid exists, the
					user is established as authenticated user. So, no authentication is performed. It does
					require the user ot enter an existing (UserFactory provided) userid.
					Use this to test stuff.
				 -->
				<method id="IdentifyingMethod" friendlyname="Identifying provided username" enabled="true"
					class="com.alfaariss.oa.authentication.identifying.IdentifyingAuthenticationMethod">
					<!-- retries: number of tries before stopping, -1 for unlimited attempts -->
					<retries>-1</retries>
					
					<!-- template@path: the JSP file that is presented to the user in which she can
					     provide the user-id that will be looked up in the UserFactory 
					-->
					<template path="/ui/sso/authn/identifying/identifying.jsp" />
				</method>
			
				<!-- 
					The AsimbaUsersXml Password method uses the asimba-users.xml file as input to
					authenticate users. The method can be configured with a password entry JSP-template,
					and the number of password attempts that a user has 
				 -->
				<method id="AsimbaUsersXmlPassword" friendlyname="Password authentication (AsimbaUsers)" enabled="true"
					class="com.alfaariss.oa.authentication.password.PasswordAuthenticationMethod">
					<template path="/ui/sso/authn/password/password.jsp" />
					<retries>1000</retries>
					
					<!-- Password Handler -->
					<password_handler class="org.asimba.am.password.asimbausersxml.AsimbaUsersXmlHandler">
						<default realm="@asimba.org"/>
						<resource realm="@asimba.org" 
							file="${webapp.root}/WEB-INF/sample-data/asimba-users.xml">
							<full_uid>false</full_uid>
						</resource>
					</password_handler>
				</method>
				
				
				<!-- 
					The SMS CM AuthMethod configures the One Time Password through SMS authentication method
					There are two templates required:
					<ul>
					<li>idtemplate: the page that presents a form to the user to ask for the user identity;
						when another authentication has already established the identity of the user,
						this screen will not be shown</li>
					<li>pwdetmplate: the page that requests the password from the user</li>
					</ul>
					The method itself can be further configured with a custom OTP handler, that defines
					how the actual OneTimePassword-code is generated, and a custom OTP distributor that
					defines how the password is being delivered to the user
				 -->
				<method id="SMSCMAuthMethod" friendlyname="SMS Authentication using CM Gateway" enabled="true"
						class="org.asimba.auth.smsotp.OTPAuthenticationMethod">
					<retries>3</retries>
					<idtemplate path="/ui/sso/authn/otp/id.jsp" />
					<pwdtemplate path="/ui/sso/authn/otp/pwd.jsp" />
					
					<!-- OneTimePassword configuration -->
					<otp_handler class="org.asimba.auth.smsotp.generator.BasicOTPGenerator">
						<salt>12345</salt>
						<length>6</length>
						<!-- allowed_age defines the number of seconds that a generated password remains valid -->
						<allowed_age>600</allowed_age>
  					</otp_handler>
					
					<!-- disabledistribute: 
					     optional argument to disable actual distribution of an OTP; it will write the
					     OTP to be sent to the log (debug-level)
					 -->
					<disabledistribute>true</disabledistribute>
					
					<!-- otp_distributor:
					     required configuration of an IOTPDistributor implementation that takes
					     care of the actual distribution of the password that was generated by the otp_handler
					     Each distributor has its own configuration options; listed below are ways to configure
					     the OTP distribution through SMS by gateways from CM and Mollie (dutch providers) 
					 -->
					<otp_distributor class="org.asimba.auth.smsotp.distributor.cm.CMOTPDistributor">
						<!-- url, customer, login and password are settings that are provided by CM
						     and used for connecting to the appropriate gateway
						-->
						<url>https://secure.cm.nl/smssgateway/cm/gateway.ashx</url>
						<customerid>9999</customerid>
						<login>customer-login</login>
						<password>password</password>
						
						<!-- phonenrattribute: user attribute that is used to figure out the phonenr
						     to send the sms message to;
						     It is recommended to configure this attribute as AuthMethod-enabling attribute 
						     in the /asimba/userfactory/translator/profile/account config section -->
						<phonenrattribute>phonenr</phonenrattribute>
						
						<!-- from: name of the sender of the SMS message to the user's phone -->  
						<from>AsimbaSSO</from>
						
						<!-- messagetemplate: actual message that is sent; use :1 as placeholder for
						     the actual generated password -->
						<messagetemplate>Your code is :1</messagetemplate>
					</otp_distributor>
				</method>
			</methods>
		</authentication>
		
		<!-- 
		<postauthorization enabled="true">
			<method id="[some-method]" friendlyname="[some-methods-friendlyname]"
				class="[implementation-of-IWebAuthorizationMethod]"
				enabled="true"
				action="[authorization-action-id]">
			</method>
			<actions>
				<action id="authorization-action-id" friendlyname="[some-actions-friendlyname]"
					class="[implementation-of-IAuthorizationAction]"
					enabled="true">
				</action>
			</actions>
		</postauthorization>
		 -->
	</websso>
	
	<!--  IDP Profiles -->	
	<profiles>
		<profile id="saml2" class="com.alfaariss.oa.profile.saml2.SAML2Profile">
			<baseURL>http://localhost:8080/asimba-wa/profiles/saml2</baseURL>
			<websso path="/sso/web" />
			
			<!-- 
				requestors : configure the SAML-specific attributes of the requestors that have been
					declared in the requestorpoolfactory/requestors section
					When a requestor is not configured here, it is not considered to be a trusted SP
			 -->
			<requestors signing="TRUE">
				<requestor id="localhost/AsimbaSimpleSP" 
						signing="FALSE">
					<metadata>
						<file>${webapp.root}/WEB-INF/sample-data/metadata-asimbasimplesp.xml</file>
						<!-- when metadata is sourced from a URL instead, the configuration could look like this:
						<http timeout="10000" url="http://my.serviceprovider.com/sp/metadata" />
						 -->
					</metadata>
				</requestor>
			</requestors>
			
			<!-- 
				Issue Instant configuration; configures the timewindow for validating the timestamp of
				SAML messages; defaults to 60 seconds before- and after the local time
				Ensure that the clocks of all elements are synchronized in some way to a trusted time source!
			 -->
			<IssueInstant>
				<window before_offset="60" after_offset="60" />	<!-- defaults -->
			</IssueInstant>
			
			<!-- 
				Metadata configuration allows specific attributes of the SAML entity to be entered
				so they can be published as part of the metadata
			 -->
			<metadata entityID="http://localhost:8080/asimba-wa/profiles/saml2">
				<signing enabled="TRUE"/>
				<organization url="http://www.asimba.org"/>
			</metadata>
			
			<!-- 
				Configure the SAML profiles, like SSO and Single Logout
			 -->
			<profiles>
				<!-- SAML Profiles configuration -->
				<profile id="sso/web" class="com.alfaariss.oa.profile.saml2.profile.sso.WebBrowserSSO">
					<!-- response: configure response settings
						   response/expiration@offset :(optional) response expiration in seconds, defaults to 60 
						   response/attributes@nameformat: (optional) specify the format in which attributes 
						     are returnes
					 -->
					<response>
						<expiration offset="120" />
						<attributes nameformat="urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified" />
					</response>

					<!-- authentication: configure for each Asimba AuthenticationProfile, the SAML2 AuthnContext 
							value to return; i.e.:
						<authentication>
							<profile id="local.password" authncontext="urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport" />
						</authentication>
						
						See: http://docs.oasis-open.org/security/saml/v2.0/saml-authn-context-2.0-os.pdf
					 -->					
					<authentication>
						<profile id="local.guest" authncontext="urn:oasis:names:tc:SAML:2.0:ac:classes:unspecified" />
						<profile id="local.identifying" authncontext="urn:oasis:names:tc:SAML:2.0:ac:classes:unspecified" />
						<profile id="local.asimba.passwd" authncontext="urn:oasis:names:tc:SAML:2.0:ac:classes:Password" />
						<profile id="local.sms.cm" authncontext="urn:oasis:names:tc:SAML:2.0:ac:classes:MobileTwoFactorUnregistered" />
						<profile id="local.pwdplussms" authncontext="urn:oasis:names:tc:SAML:2.0:ac:classes:MobileTwoFactorUnregistered" />
					</authentication>
				
					
					<bindings default="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect">
						<binding id="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" />
						<binding id="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST">
							<property name="path" value="/ui/profiles/saml2/http-post.jsp" />
						</binding>
						<binding id="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact" >
							<property name="post" value="TRUE" />
							<property name="path" value="/ui/profiles/saml2/http-artifact-post.jsp" />
						</binding>
					</bindings>
					
					<nameid default="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">
					<!-- --> 
						<format id="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">
							<!-- attribute@name: optional user attribute name that is used to build specified NameID format 
							     must be provided when setting opaque to be disabled 
							-->
							<attribute name="email"/>
							
							<opaque enabled="FALSE" salt="0"/>
						</format>
						<format id="urn:oasis:names:tc:SAML:2.0:nameid-format:transient">
							<length>16</length>
						</format>
						<format id="urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified" />
						
<!-- 						<format id="urn:oasis:names:tc:SAML:1.1:nameid-format:email">
							<attribute name="email"/>
						</format>
 -->
 						<format id="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress">
							<attribute name="email"/>
						</format>
					</nameid>
				</profile> <!-- sso/web -->
				
				<profile id="sso/logout" class="com.alfaariss.oa.profile.saml2.profile.sso.SingleLogout">
                    
					<bindings default="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect">
                        <binding id="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" />
                        <binding id="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST">
                            <property name="path" value="/ui/profiles/saml2/http-post.jsp" />
                        </binding>
<!--                        
                        <binding id="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact" >
                        	<property name="post" value="false" />
                        	<property name="path" value="/ui/profiles/saml2/http-artifact-post.jsp" />                                                       
                        </binding>
                        <binding id="urn:oasis:names:tc:SAML:2.0:bindings:SOAP" />
 -->
                    </bindings>
                    
                    <nameid>
						<format id="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">
							<attribute name="email"/>
							<opaque enabled="FALSE" salt="0"/>
						</format>
						<format id="urn:oasis:names:tc:SAML:2.0:nameid-format:transient">
							<length>16</length>
						</format>
						<format id="urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified" />
						
						<!-- dopey adds: -->
<!-- 						<format id="urn:oasis:names:tc:SAML:1.1:nameid-format:email">
							<attribute name="email"/>
						</format>
 -->						<!-- dopey adds until here -->
						
						<format id="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress">
							<attribute name="email"/>
						</format>
					</nameid>
				</profile> <!-- sso/logout -->
				
			</profiles>
			
		</profile>

		
		<!-- Also add development profile aselect: -->
		<profile id="aselect" class="com.alfaariss.oa.profile.aselect.processor.ASelectProcessor" >
			<redirect_url>http://localhost:8080/asimba-wa/profiles/aselect</redirect_url>
			
			<!-- optional websso configuration tweaks -->
			<websso>
				<path>/sso</path>
				<url>http://localhost:8080/asimba-wa/sso</url>
			</websso>
			
			<!-- optional error configuration tweaks -->
			<error>
				<jsp path="/ui/profiles/aselect/error.jsp" />
				<handling local="FALSE" />
			</error>
			
			<!-- configure to not use A-Select WS -->
			<ws enabled="TRUE" force_requestor_id="FALSE" />
			
			<!-- does not work though.. -->
			<logout enabled="TRUE" />
			
			<requesthandlers>
				<sp enabled="TRUE" app_level="9">
					<!-- 
						requestorpool : Configure the requestors from the specified pool
							as allowed requestors
					 -->
					<requestorpool id="requestorpool.1">
						<signing enabled="FALSE" />
						<app_level>2</app_level>
						<!-- uid: when @attribute is not configured, uses the authenticated 
							userid instead of the configured attribute
							i.e.
							<uid attribute="phonenr">
							will return the value of the "phonenr" attribute as the user-id
						-->
						<uid> <!-- attribute="email"  --> 
							<opaque enabled="FALSE" salt="bad"/>
						</uid>
					</requestorpool>
				</sp>
				<idp enabled="FALSE" app_level="0">
					<!-- Optional Requestorpool configuration -->
				</idp>
			</requesthandlers>
			
			<authentication authsp_level="0">
				<profile id="local.guest" authsp_level="1" />
				<profile id="local.identifying" authsp_level="1" />
				<profile id="local.asimba.passwd" authsp_level="10" />
				<profile id="local.sms.cm" authsp_level="20" />
				<profile id="local.pwdplussms" authsp_level="40" />
			</authentication>
		</profile>
		
	</profiles>
	
	<attributegatherer id="asimba.gatherer.1" friendlyname="Collect attributes from all sources" 
			enabled="true">
		<processor id="AsimbaUsersXml" friendlyname="Source asimba-users.xml" 
				class="org.asimba.engine.attribute.gather.processor.file.AsimbaUsersXmlGatherer">
			<file>${webapp.root}/WEB-INF/sample-data/asimba-users.xml</file>
			
			<!-- 
			gather can specify a whitelist of attributes to gather
			if omitted, all available attributes are gathered
			-->
			<!--
			<gather>
				<attribute name="whitelist-attribute-name" />
			</gather>
			 -->
			
			<mapper>
				<map ext="ext.phonenr" int="phonenr" />
			</mapper>
		</processor>
	</attributegatherer>
	
	
	<attributerelease class="com.alfaariss.oa.engine.attribute.release.configuration.ConfigurationFactory">
		<policy id="asimba.releasepolicy.1" friendlyname="Default Attribute Release policy" enabled="true">
			<attribute name="firstname" />
			<attribute name="lastname" />
			<attribute name="email" />
			<attribute name="role" />
			<attribute name="country" />	<!-- country is defined in <global ..> attribute section -->
			<!-- when all available attributes can be released, use the wildcard "*" for name,
				like:
				<attribute name="*" />
				Asimba Baseline keeps the password in the same format as the attributes, so
				allowing all attributes to be released, would expose the password as well!
			 -->
		</policy>
	</attributerelease>
	
	
	<!--
	  <postauthorization> defines which profiles are available in this server instance 
	 -->
	 <!--
	 <postauthorization class="com.alfaariss.oa.engine.authorization.configuration.ConfigurationFactory"
	 		enabled="true">
	 	<profile id="[define-postauthorization-profile]" friendlyname="[profiles-friendlyname]" enabled="[true/false]">
	 		<method id="[reference-postauthz-method-id]" />
	 	</profile>
	 </postauthorization>
	  -->
	  
	
	
	<!--  Helpers -->
	<helpers>
		<helper id="stylesheet" enabled="true" 
			class="com.alfaariss.oa.helper.stylesheet.StyleSheetHelper" />
	</helpers>
</asimba-server>